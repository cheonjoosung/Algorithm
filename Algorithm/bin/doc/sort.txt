1. Arrays.sort(int [] array) 사용
 > 기본적으로 오름차순으로 정렬이 됨. Primitive Type 은 역순으로 직접 바꾸는 클래스 함수 없음
 > String [] array2 = {"a", "b", "z" ..... }
   Arrays.sort(array2, Collections.reverseOrder()) 하면 내림차순으로 가능
   콜렉션 타입만 사용이 가능한 클래스 함수
 > Arrays.sort() 의 내부 함수는 DualPivotQuicksort 라는 것을 사용함 -> 빠를것으로 예상
   많은 데이터 세트에서도 O( n log n ) 의 성능, 하나의 pivot 을 사용하는 quick sort(최악 O( n*n ) 보다는 빠름

2. 정렬에 관한 정리
- 기본 정렬 알고리즘
 > 삽입 정렬 : 값 선택 후 비교
 > 버블 정렬 : 처음부터 끝까지 비교하면서 Swap
 > 선택 정렬 : 최소값을 찾아서 교환하는 형태 (비안정적)
 > 합병 정렬(머지 소트) : O(n log n) , 상황에 따라 부가 메모리
 > 퀵 소트 : O(n log n) , O ( n*n ) , O(n log n) 부가 메모리

- 선형 정렬 알고리즘 : 앞의 시간 복잡도를 개선 https://www.slideshare.net/Codingclub/3-69567770
 > 계수(Counting) 정렬 http://nhs0912.tistory.com/57
 > 버킷(Bucket) 정렬 : 키 값이 작은 범위 안에 들어올 때 적용. 키 값의 범위내에 균등 분표
 > 기수(Radix) 정렬

3.